<?php
namespace cmsgears\core\common\base;

// Yii Imports
use \Yii;
use yii\helpers\Html;
use yii\helpers\Url;
use yii\widgets\LinkPager;

// CMG Imports
use cmsgears\core\common\config\CoreGlobal;

use cmsgears\core\common\utilities\CodeGenUtil;

abstract class PageWidget extends Widget {

    // Variables ---------------------------------------------------

    // Public Variables --------------------

    /**
     * Used to decorate wrapper. The inherited $options will be used for div wrapping the models wrapper.
     */
    public $wrapperOptions  = [ 'class' => 'wrapper-model clearfix' ];

    public $modelOptions    = [ 'class' => 'model clearfix' ];

    /*
     * Base path used for all and single paths.
     */
    public $basePath        = '';

    /*
     * Path to be used for View All button or link if applicable.
     */
    public $allPath         = 'all';

    /**
     * It can be used to show link to view all models.
     */
    public $showAllPath     = false;

    /*
     * Path to view single model page if applicable.
     */
    public $singlePath      = 'single';

    /*
     * Check whether pagination is required for this widget.
     */
    public $pagination      = true;

    /*
     * Paging can be done using standard Yii Widget i.e. LinkPager. If paging is false, scroll/action based paging can be used to show remaining pages instead of clickable page links.
     */
    public $paging          = true;

    /*
     * Ajax url used to fetch pages. It must be a relative path for appropriate apix controller.
     */
    public $ajaxUrl         = null;

    /**
     * Ajaxify the paging links in case $paging is set to true.
     */
    public $ajaxifyLinks    = true;

    /**
     * Default page limit.
     */
    public $limit           = 5;

    /*
     * Useful in case limited text is displayed for a model irrespective of total length.
     */
    public $textLimit       = CoreGlobal::DISPLAY_TEXT_SMALL;

    // Filter Models    - multisite environment

    /**
     * Exclude main site models and show models from all other sites.
     */
    public $excludeMain     = false;

    /**
     * Show models only from current site ignoring all other sites.
     */
    public $siteModels      = false;

    // Protected Variables -----------------

    /**
     * DataProvider to fetch initial page.
     */
    protected $dataProvider = null;

    /**
     * First page of models.
     */
    protected $modelPage    = null;

    /**
     * Page info having total details.
     */
    protected $pageInfo     = null;

    /**
     * Page links generated by LinkPager.
     */
    protected $pageLinks    = null;

    // Constructor and Initialisation ------------------------------

    // yii\base\Object

    public function init() {

        parent::init();

        // Init models
        $this->initModels();

        // Init Pagination
        $this->initPaging();
    }

    /**
     * Initialise data provider and fetch first page of models.
     */
    abstract public function initModels( $config = [] );

    /**
     * Initialise paging if applicable.
     */
    public function initPaging( $config = [] ) {

        // Init Pagination
        if( $this->pagination && $this->paging && isset( $this->dataProvider ) ) {

            $pagination         = $this->dataProvider->getPagination();
            $this->pageInfo     = CodeGenUtil::getPaginationDetail( $this->dataProvider );
            $this->pageLinks    = LinkPager::widget( [ 'pagination' => $pagination ] );
        }
    }

    // Instance Methods --------------------------------------------

    public function renderWidget( $config = [] ) {

        // Models and HTML
        $models         = $this->modelPage;
        $modelsHtml     = [];

        // Views
        $wrapperView    = $this->template . '/wrapper';
        $singleView     = $this->template . '/single';

        if( Yii::$app->cmgCore->multiSite && Yii::$app->cmgCore->subDirectory ) {

            $siteName       = Yii::$app->cmgCore->getSiteName();

            if( strlen( $this->basePath ) > 0 ) {

                $this->basePath = Url::toRoute( [ "$siteName/$this->basePath" ] );
            }
            else {

                $this->basePath = Url::toRoute( [ "$siteName" ] );
            }
        }

        if( strlen( $this->basePath ) > 0 ) {

            $this->allPath      = Url::toRoute( [ "/$this->basePath/$this->allPath" ], true );
            $this->singlePath   = Url::toRoute( [ "/$this->basePath/$this->singlePath" ], true );
        }
        else {

            $this->allPath      = Url::toRoute( [ "/$this->allPath" ], true );
            $this->singlePath   = Url::toRoute( [ "/$this->singlePath" ], true );
        }

        foreach( $models as $model ) {

            $modelsHtml[]   = $this->render( $singleView, [ 'model' => $model, 'widget' => $this ] );
        }

        $modelsHtml     = implode( '', $modelsHtml );

        $content        = $this->render( $wrapperView, [ 'modelsHtml' => $modelsHtml, 'widget' => $this,
                                'dataProvider' =>  $this->dataProvider, 'modelPage' =>  $this->modelPage,
                                'pageInfo' =>  $this->pageInfo, 'pageLinks' =>  $this->pageLinks
                            ]);

        return Html::tag( 'div', $content, $this->options );
    }
}

?>